syntax = "proto3";

package rpcpb;

service Query {
	rpc Fetch(FetchMessage) returns (stream FetchResult);
	rpc FetchTagged(FetchMessage) returns (stream FetchResult);
	rpc Write(stream WriteMessage) returns (Error);
}

message WriteMessage {
	WriteQuery query = 1;
	WriteOptions options = 2;
}

message WriteQuery {
	int32 unit = 1;
	bytes annotation = 2;
	repeated Datapoint datapoints = 3;
	map<string, string> tags = 4;
}

message WriteOptions {
	string id = 1;
}

message Datapoint {
	int64 timestamp = 1;
	double value = 2;
}

message Datapoints {
	repeated Datapoint datapoints = 1;
	bool fixedResolution = 2;
}

message Error {
	string error = 1;
}

message FetchMessage {
	FetchQuery query = 1;
	FetchOptions options = 2;
}

message FetchQuery {
	int64 start = 1;
	int64 end = 2;
	repeated Matcher tagMatchers = 3;
}

message Ownership {
	string source = 1;
	string chargebackID = 2;
	string user = 3;
	string dashboard = 4;
	string sourceUUID = 5;
}

message FetchOptions {
	string id = 1;
	Ownership owner = 2;
}

message Matcher {
	string name = 1;
	string value = 2;
	int64 type = 3;
}

message FetchResult {
	repeated Series series = 1;
}

message Segment {
	bytes head = 1;
	bytes tail = 2;
	int64 startTime = 3;
	int64 blockSize = 4;
}

message Segments {
	Segment merged = 1;
	repeated Segment unmerged = 2;
}

message CompressedValuesReplica {
	repeated Segments segments = 1;
}

message Tag {
	bytes name = 1;
	bytes value = 2;
}

message Series {
	bytes id = 1;
	Datapoints values = 2;
	repeated Tag tags = 3;
	bytes namespace = 4;
	int64 startTime = 5;
	int64 endTime = 6;
	bytes compressedTags = 7;
	repeated CompressedValuesReplica replicas = 8;
}
